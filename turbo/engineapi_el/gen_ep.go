// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package engineapi_el

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon-lib/common/hexutil"
	"github.com/ledgerwatch/erigon-lib/common/hexutility"
	"github.com/ledgerwatch/erigon/core/types"
)

var _ = (*executionPayloadMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExecutionPayload) MarshalJSON() ([]byte, error) {
	type ExecutionPayload struct {
		ParentHash    common.Hash         `json:"parentHash"    gencodec:"required"`
		FeeRecipient  common.Address      `json:"feeRecipient"  gencodec:"required"`
		StateRoot     common.Hash         `json:"stateRoot"     gencodec:"required"`
		ReceiptsRoot  common.Hash         `json:"receiptsRoot"  gencodec:"required"`
		LogsBloom     hexutility.Bytes    `json:"logsBloom"     gencodec:"required"`
		PrevRandao    common.Hash         `json:"prevRandao"    gencodec:"required"`
		BlockNumber   hexutil.Uint64      `json:"blockNumber"   gencodec:"required"`
		GasLimit      hexutil.Uint64      `json:"gasLimit"      gencodec:"required"`
		GasUsed       hexutil.Uint64      `json:"gasUsed"       gencodec:"required"`
		Timestamp     hexutil.Uint64      `json:"timestamp"     gencodec:"required"`
		ExtraData     hexutility.Bytes    `json:"extraData"     gencodec:"required"`
		BaseFeePerGas *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
		BlockHash     common.Hash         `json:"blockHash"     gencodec:"required"`
		Transactions  []hexutility.Bytes  `json:"transactions"  gencodec:"required"`
		Withdrawals   []*types.Withdrawal `json:"withdrawals"`
		BlobGasUsed   *uint64             `json:"blobGasUsed"`
		ExcessBlobGas *uint64             `json:"excessBlobGas"`
	}
	var enc ExecutionPayload
	enc.ParentHash = e.ParentHash
	enc.FeeRecipient = e.FeeRecipient
	enc.StateRoot = e.StateRoot
	enc.ReceiptsRoot = e.ReceiptsRoot
	enc.LogsBloom = e.LogsBloom
	enc.PrevRandao = e.PrevRandao
	enc.BlockNumber = hexutil.Uint64(e.BlockNumber)
	enc.GasLimit = hexutil.Uint64(e.GasLimit)
	enc.GasUsed = hexutil.Uint64(e.GasUsed)
	enc.Timestamp = hexutil.Uint64(e.Timestamp)
	enc.ExtraData = e.ExtraData
	enc.BaseFeePerGas = (*hexutil.Big)(e.BaseFeePerGas)
	enc.BlockHash = e.BlockHash
	if e.Transactions != nil {
		enc.Transactions = make([]hexutility.Bytes, len(e.Transactions))
		for k, v := range e.Transactions {
			enc.Transactions[k] = v
		}
	}
	enc.Withdrawals = e.Withdrawals
	enc.BlobGasUsed = e.BlobGasUsed
	enc.ExcessBlobGas = e.ExcessBlobGas
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayload) UnmarshalJSON(input []byte) error {
	type ExecutionPayload struct {
		ParentHash    *common.Hash        `json:"parentHash"    gencodec:"required"`
		FeeRecipient  *common.Address     `json:"feeRecipient"  gencodec:"required"`
		StateRoot     *common.Hash        `json:"stateRoot"     gencodec:"required"`
		ReceiptsRoot  *common.Hash        `json:"receiptsRoot"  gencodec:"required"`
		LogsBloom     *hexutility.Bytes   `json:"logsBloom"     gencodec:"required"`
		PrevRandao    *common.Hash        `json:"prevRandao"    gencodec:"required"`
		BlockNumber   *hexutil.Uint64     `json:"blockNumber"   gencodec:"required"`
		GasLimit      *hexutil.Uint64     `json:"gasLimit"      gencodec:"required"`
		GasUsed       *hexutil.Uint64     `json:"gasUsed"       gencodec:"required"`
		Timestamp     *hexutil.Uint64     `json:"timestamp"     gencodec:"required"`
		ExtraData     *hexutility.Bytes   `json:"extraData"     gencodec:"required"`
		BaseFeePerGas *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
		BlockHash     *common.Hash        `json:"blockHash"     gencodec:"required"`
		Transactions  []hexutility.Bytes  `json:"transactions"  gencodec:"required"`
		Withdrawals   []*types.Withdrawal `json:"withdrawals"`
		BlobGasUsed   *uint64             `json:"blobGasUsed"`
		ExcessBlobGas *uint64             `json:"excessBlobGas"`
	}
	var dec ExecutionPayload
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for ExecutionPayload")
	}
	e.ParentHash = *dec.ParentHash
	if dec.FeeRecipient == nil {
		return errors.New("missing required field 'feeRecipient' for ExecutionPayload")
	}
	e.FeeRecipient = *dec.FeeRecipient
	if dec.StateRoot == nil {
		return errors.New("missing required field 'stateRoot' for ExecutionPayload")
	}
	e.StateRoot = *dec.StateRoot
	if dec.ReceiptsRoot == nil {
		return errors.New("missing required field 'receiptsRoot' for ExecutionPayload")
	}
	e.ReceiptsRoot = *dec.ReceiptsRoot
	if dec.LogsBloom == nil {
		return errors.New("missing required field 'logsBloom' for ExecutionPayload")
	}
	e.LogsBloom = *dec.LogsBloom
	if dec.PrevRandao == nil {
		return errors.New("missing required field 'prevRandao' for ExecutionPayload")
	}
	e.PrevRandao = *dec.PrevRandao
	if dec.BlockNumber == nil {
		return errors.New("missing required field 'blockNumber' for ExecutionPayload")
	}
	e.BlockNumber = uint64(*dec.BlockNumber)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for ExecutionPayload")
	}
	e.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for ExecutionPayload")
	}
	e.GasUsed = uint64(*dec.GasUsed)
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for ExecutionPayload")
	}
	e.Timestamp = uint64(*dec.Timestamp)
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for ExecutionPayload")
	}
	e.ExtraData = *dec.ExtraData
	if dec.BaseFeePerGas == nil {
		return errors.New("missing required field 'baseFeePerGas' for ExecutionPayload")
	}
	e.BaseFeePerGas = (*big.Int)(dec.BaseFeePerGas)
	if dec.BlockHash == nil {
		return errors.New("missing required field 'blockHash' for ExecutionPayload")
	}
	e.BlockHash = *dec.BlockHash
	if dec.Transactions == nil {
		return errors.New("missing required field 'transactions' for ExecutionPayload")
	}
	e.Transactions = make([][]byte, len(dec.Transactions))
	for k, v := range dec.Transactions {
		e.Transactions[k] = v
	}
	if dec.Withdrawals != nil {
		e.Withdrawals = dec.Withdrawals
	}
	if dec.BlobGasUsed != nil {
		e.BlobGasUsed = dec.BlobGasUsed
	}
	if dec.ExcessBlobGas != nil {
		e.ExcessBlobGas = dec.ExcessBlobGas
	}
	return nil
}
