// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package engineapi_el

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ledgerwatch/erigon-lib/common/hexutil"
)

var _ = (*getPayloadResponseMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g GetPayloadResponse) MarshalJSON() ([]byte, error) {
	type GetPayloadResponse struct {
		ExecutionPayload      ExecutionPayload `json:"executionPayload" gencodec:"required"`
		BlockValue            *hexutil.Big     `json:"blockValue"`
		BlobsBundle           *BlobsBundleV1   `json:"blobsBundle"`
		ShouldOverrideBuilder bool             `json:"shouldOverrideBuilder"`
	}
	var enc GetPayloadResponse
	enc.ExecutionPayload = g.ExecutionPayload
	enc.BlockValue = (*hexutil.Big)(g.BlockValue)
	enc.BlobsBundle = g.BlobsBundle
	enc.ShouldOverrideBuilder = g.ShouldOverrideBuilder
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GetPayloadResponse) UnmarshalJSON(input []byte) error {
	type GetPayloadResponse struct {
		ExecutionPayload      *ExecutionPayload `json:"executionPayload" gencodec:"required"`
		BlockValue            *hexutil.Big      `json:"blockValue"`
		BlobsBundle           *BlobsBundleV1    `json:"blobsBundle"`
		ShouldOverrideBuilder *bool             `json:"shouldOverrideBuilder"`
	}
	var dec GetPayloadResponse
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ExecutionPayload == nil {
		return errors.New("missing required field 'executionPayload' for GetPayloadResponse")
	}
	g.ExecutionPayload = *dec.ExecutionPayload
	if dec.BlockValue != nil {
		g.BlockValue = (*big.Int)(dec.BlockValue)
	}
	if dec.BlobsBundle != nil {
		g.BlobsBundle = dec.BlobsBundle
	}
	if dec.ShouldOverrideBuilder != nil {
		g.ShouldOverrideBuilder = *dec.ShouldOverrideBuilder
	}
	return nil
}
